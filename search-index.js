var searchIndex = JSON.parse('{\
"mazelib":{"doc":"Mazes are inherently complex. However, most programs give â€¦","t":"AAAAAAAAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAANDEDNNNLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLNDDEENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAADILLLLLLLLLLLLLLDILLLLLLLLLLLLLLDDDDIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAADDGGDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLAAAAAAIKKKKNDIIENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLQQQIKKKLLLLKKKKKKIIKKIIKLKKIQIQKKKKKKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFF","n":["implm","interface","path","util","buffer","cell","coordinate","export","generate","point","ArrayBuffer","VecBuffer","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get","get","get_mut","get_mut","init","init","into","into","new","new","set","set","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","block","inline","BOUNDARY","BlockCellLocation","BlockCellPrimaryValue","BlockCellValue","PASSAGE","UNVISITED","WALL","at","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cell_type","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","index","index_mut","init","init","init","into","into","into","is_fully_visited","is_marked","marked","offset","set_marked","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BOUNDARY","InlineCellLocation","InlineCellValue","InlineCellValueEdge","InlineCellValueEdgeSide","NEGATIVE","PASSAGE","POSITIVE","UNVISITED","WALL","at","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","edges","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_wall","hash","hash","hash","hash","index","index_mut","init","init","init","init","into","into","into","into","is_fully_visited","is_marked","marked","offset","set_marked","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","block","inline","BoxSpaceBlockCellMazeCoordinator","BoxSpaceBlockCellMazeCoordinatorBuilder","borrow","borrow","borrow_mut","borrow_mut","buffer","build","builder","coord_space","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get","get_cell_value","get_cell_value_mut","get_connection","get_full_dimensions","get_mut","init","init","into","into","make_boundary","make_boundary_between","make_passage","make_passage_between","make_wall","make_wall_between","map_pt_to_cell_loc","padding","padding","scale_factors","scale_factors","scale_factors_checked","set_cell_value","set_cell_value_type","set_type","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BoxSpaceInlineCellMazeCoordinator","BoxSpaceInlineCellMazeCoordinatorBuilder","borrow","borrow","borrow_mut","borrow_mut","buffer","build","coord_space","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get","get_connection","init","init","into","into","make_boundary","make_boundary_between","make_passage","make_passage_between","make_wall","make_wall_between","new","set","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","img","minecraft","text","BoxSpaceImageMazeExporter","ImageMazeExporter","borrow","borrow_mut","deref","deref_mut","drop","export","from","init","into","new","try_from","try_into","type_id","vzip","BoxSpaceSchematicMazeExporter","SchematicMazeExporter","borrow","borrow_mut","deref","deref_mut","drop","export","from","init","into","new","try_from","try_into","type_id","vzip","BoxSpaceBlockCellTextMazeExporter","BoxSpaceBlockCellTextMazeExporterBuilder","BoxSpaceInlineCellTextMazeExporter","BoxSpaceInlineCellTextMazeExporterBuilder","BoxSpaceTextMazeExporter","TextMazeExporter","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_char","boundary_char","build","build","builder","builder","chars_per_cell_horizontally","chars_per_cell_horizontally","chars_per_cell_horizontally","chars_per_cell_horizontally","chars_per_cell_horizontally_checked","chars_per_cell_horizontally_checked","chars_per_cell_vertically","chars_per_cell_vertically","chars_per_cell_vertically","chars_per_cell_vertically","chars_per_cell_vertically_checked","chars_per_cell_vertically_checked","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","export","export","export","export","from","from","from","from","init","init","init","init","into","into","into","into","passage_char","passage_char","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unvisited_char","unvisited_char","vzip","vzip","vzip","vzip","wall_char","wall_char","HuntAndKillGenerator","NAryTreeGenerator","RecursiveBacktrackerGenerator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","generate","generate","generate","generate_with_rng","generate_with_rng","generate_with_rng","generate_with_rng","generate_with_rng","generate_with_rng","init","init","init","into","into","into","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","boxy","polar","BoxCoordinateSpace","BoxCoordinateSpaceIterator","CoordinatePair","CoordinateTriplet","CoordinateTuplet","ThreeDimensionalBoxCoordinateSpace","TwoDimensionalBoxCoordinateSpace","any_coordinate_is","are_adjacent","at","axis_of_adjacency_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","choose","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","index","index","index_mut","init","init","init","into","into","into","into_iter","into_iter","into_iter","is_adjacent_to_edge","iter","iter_from","logical_size","neighbours_of_pt","new","new_checked","next","offset","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","PolarCoordinate","PolarCoordinateSpace","PolarCoordinateSpaceIterator","are_adjacent","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","choose","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","from","from","from","hash","init","init","init","into","into","into","into_iter","iter","iter_from","logical_size","neighbours_of_pt","new","new_checked","next","offset_ring","offset_sector","par_bridge","ring","rings","sector","sectors","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_ring","with_sector","buffer","cell","coordinate","export","generate","point","MazeBuffer","get","get_mut","new","set","BOUNDARY","CellID","CellLocation","CellValue","ConnectionType","PASSAGE","UNVISITED","WALL","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","init","init","into","into","is_fully_visited","is_marked","set_marked","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CellLoc","CellVal","CoordSpace","MazeCoordinator","coord_space","get","get_connection","is_boundary_between","is_passage_between","is_unvisited_between","is_wall_between","make_boundary","make_boundary_between","make_passage","make_passage_between","make_wall","make_wall_between","DefaultMazeExporter","MazeExporter","export","export","DefaultMazeGenerator","MazeGenerator","generate","generate","generate_with_rng","generate_with_rng","CoordinateSpace","Iter","Point","PtType","are_adjacent","choose","iter","iter_from","logical_size","neighbours_of_pt","CellPath","Path","PointPath","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contains","contains_movement","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","fmt","from","from","from","from_vec","index","index_mut","init","init","init","into","into","into","into_iter","is_cycle","is_simple","is_simple_cycle","len","make_simple","push","starting_at","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","apply_solid_border","convert_unvisited_points_to_walls"],"q":[[0,"mazelib"],[4,"mazelib::implm"],[10,"mazelib::implm::buffer"],[46,"mazelib::implm::cell"],[48,"mazelib::implm::cell::block"],[131,"mazelib::implm::cell::inline"],[236,"mazelib::implm::coordinate"],[238,"mazelib::implm::coordinate::block"],[291,"mazelib::implm::coordinate::inline"],[332,"mazelib::implm::export"],[335,"mazelib::implm::export::img"],[351,"mazelib::implm::export::minecraft"],[367,"mazelib::implm::export::text"],[451,"mazelib::implm::generate"],[505,"mazelib::implm::point"],[507,"mazelib::implm::point::boxy"],[597,"mazelib::implm::point::polar"],[668,"mazelib::interface"],[674,"mazelib::interface::buffer"],[679,"mazelib::interface::cell"],[727,"mazelib::interface::coordinate"],[744,"mazelib::interface::export"],[748,"mazelib::interface::generate"],[754,"mazelib::interface::point"],[764,"mazelib::path"],[819,"mazelib::util"],[821,"core::fmt"],[822,"core::fmt"],[823,"core::result"],[824,"core::any"],[825,"core::hash"],[826,"std::io"],[827,"std::io"],[828,"image::image"],[829,"std::io::error"],[830,"core::marker"],[831,"core::option"],[832,"alloc::vec"],[833,"alloc::string"],[834,"rayon::iter::par_bridge"],[835,"core::clone"],[836,"core::marker"],[837,"core::cmp"]],"d":["A variety of built-in implementations of the interfaces â€¦","The core abstractions of our maze model.","Paths through mazes.","A variety of basic helper functions provided for your â€¦","Some basic built-in buffer implementations.","Common cell classes.","Coordinators for the other built-in components.","Exporters for common formats.","A variety of different maze generators built-in.","Common coordinate spaces and their points.","A buffer that stores its cells in a fixed-size array.","A buffer that stores its cells in a <code>Vec</code> allocated on the â€¦","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Block cells are cells where each cell is exactly one of: â€¦","Inline cells store whether they have a wall on each edge.","A cell that cannot be moved through.","<code>CellLocation</code> for block cells.","The possible values that a block cell can hold (ignoring â€¦","A cell type where cells are either passage cells or wall â€¦","A cell that can be moved through.","A cell that has not yet been generated.","A cell that cannot be moved through.","Replace the position along the given axis with a new value.","","","","","","","The specific type or value of the cell. For more â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether this cell has been marked or flagged. This is a â€¦","Get the point at a given offset from this point (dimension â€¦","","","","","","","","","","","","","","","","","Like a wall, but it will never be carved through by a â€¦","<code>CellLocation</code> for inline cells.","A cell type where each cell tracks the state of its own â€¦","The types of edges that an inline cell can have.","The relative position of a wall in an <code>InlineCellValue</code> â€¦","The wall that is closest to zero along a given axis.","An edge that permits passage. Note that the neighbouring â€¦","The wall that is furthest from zero along a given axis.","An edge that has not been generated yet by a generator. An â€¦","An edge that denies passage. Walls may be converted into â€¦","Replace the position along the given axis with a new value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The connection type or edge type between this cell and its â€¦","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether this cell has been marked or flagged. This is a â€¦","Get the point at a given offset from this point (dimension â€¦","","","","","","","","","","","","","","","","","","","","","","Coordinators for block cells.","Coordinators for inline cells.","A maze coordinator that maps a box-like coordinate space â€¦","A builder for a <code>BoxSpaceBlockCellMazeCoordinator</code>.","","","","","","Finalise the <code>BoxSpaceBlockCellMazeCoordinator</code>.","Construct a new builder for a â€¦","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Get the value of any cell.","Get the value of any cell for mutation.","","The dimensions of the coordinate space, scaled by the â€¦","Get the value of the point <code>pt</code> for mutation.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set <code>pt</code> to <code>BlockCellPrimaryValue::BOUNDARY</code>.","Set <code>from</code> and <code>to</code> to <code>BlockCellPrimaryValue::BOUNDARY</code>. If the â€¦","Set <code>pt</code> to <code>BlockCellPrimaryValue::PASSAGE</code>.","Set <code>from</code> and <code>to</code> to <code>BlockCellPrimaryValue::PASSAGE</code>. If the â€¦","Set <code>pt</code> to <code>BlockCellPrimaryValue::WALL</code>.","Set <code>from</code> and <code>to</code> to <code>BlockCellPrimaryValue::WALL</code>. If the â€¦","Map a point to a cell location.","Set the number of cells on the edge of the maze that are â€¦","The number of cells between the edge of the maze and the â€¦","Set the number of cells a point corresponds to, for each â€¦","The number of cells between points, minus one.","Set the number of cells a point corresponds to, for each â€¦","Set the value of any cell, including ones not mapped by â€¦","Sugar for","Sugar for","","","","","","","","","TODO","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set all edges of <code>pt</code> to InlineCellValueEdge::BOUNDARY.","Set the edge between the two cells to â€¦","Replace all edges of <code>pt</code> that are â€¦","Set the edge between the two cells to â€¦","Set all edges of <code>pt</code> to InlineCellValueEdge::WALL.","Set the edge between the two cells to â€¦","","Set the value of any cell, including ones not mapped by â€¦","","","","","","","","","Image-related export formats.","Minecraft-related export formats.","Text-based export formats.","An <code>ImageMazeExporter</code> for mazes that use <code>BoxCoordinateSpace</code>â€¦","Export a 2D maze into an image.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Construct a new instance.","","","","","A <code>SchematicMazeExporter</code> for mazes that use â€¦","Export a 2D maze into a Minecraft schematic.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Construct a new instance.","","","","","An exporter that renders <code>BoxSpaceBlockCellMazeCoordinator</code>s â€¦","A builder for a <code>BoxSpaceBlockCellTextMazeExporter</code>.","An exporter that renders <code>BoxSpaceInlineCellMazeCoordinator</code>â€¦","A builder for a <code>BoxSpaceInlineCellTextMazeExporter</code>.","A <code>TextMazeExporter</code> for 2D mazes that use <code>BoxCoordinateSpace</code>â€¦","Export a 2D maze to text.","","","","","","","","","Return the character that is emitted for boundary cells.","Set the character to emit for boundary cells.","Finalise the <code>BoxSpaceBlockCellTextMazeExporter</code>.","Finalise the <code>BoxSpaceInlineCellTextMazeExporter</code>.","Construct a new builder for a â€¦","Construct a new builder for a â€¦","Return the number of the characters that is emitted â€¦","Set the number of the characters to emit horizontally per â€¦","Return the number of the characters that is emitted â€¦","Set the number of the characters to emit horizontally per â€¦","Set the number of the characters to emit horizontally per â€¦","Set the number of the characters to emit horizontally per â€¦","Return the number of the characters that is emitted â€¦","Set the number of the characters to emit vertically per â€¦","Return the number of the characters that is emitted â€¦","Set the number of the characters to emit vertically per â€¦","Set the number of the characters to emit vertically per â€¦","Set the number of the characters to emit vertically per â€¦","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the character that is emitted for passage cells.","Set the character to emit for passage cells.","","","","","","","","","","","","","Return the character that is emitted for unvisited cells.","Set the character to emit for unvisited cells.","","","","","Return the character that is emitted for wall cells.","Set the character to emit for wall cells.","The <strong>Hunt-and-Kill</strong> algorithm links random walks together to â€¦","The <strong><em>n</em>-ary Tree</strong> algorithm is a generalisation of the <em>Binary </em>â€¦","The <strong>Recursive Backtracker</strong> algorithm is a variant of â€¦","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a new generator instance.","Construct a new generator instance.","Construct a new generator instance.","","","","","","","","","","","","","Box coordinate spaces. This includes square mazes, â€¦","Polar (circular) coordinate spaces.","An <code>n</code>-dimensional coordinate space shaped like a box with â€¦","An iterator for iterating over all of the points in a â€¦","An (x, y) pair for referencing points in a â€¦","An (x, y, z) triplet for referencing points in a â€¦","A tuplet of unsigned integers that uniquely represent a â€¦","A three dimensional rectangular cuboid coordinate space.","A flat rectangular coordinate space. The most common type â€¦","Return true if any coordinate of this tuplet is the same â€¦","","Replace the position along the given axis with a new value.","Return the axis upon which this point is directly adjacent â€¦","","","","","","","","","","","","","","","","","","Return the (size) dimensions of this coordinate space.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return whether the point is adjacent to the edge of this â€¦","","","","","Construct a new <code>BoxCoordinateSpace</code> from the given (size) â€¦","Construct a new <code>BoxCoordinateSpace</code> from the given (size) â€¦","","Get the point at a given offset from this point along the â€¦","","","","","","","","","","","","","","","","","A polar coordinate.","A discretised polar (circular) coordinate space.","An iterator for iterating over all of the points in a boxy â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Construct a new <code>PolarCoordinateSpace</code> from the given â€¦","Construct a new <code>PolarCoordinateSpace</code> from the given â€¦","","Return a new polar coordinate with <code>self</code>â€™s ring â€¦","Return a new polar coordinate with <code>self</code>â€™s ring â€¦","","The ring coordinate.","Return the number of rings in this coordinate space.","The sector coordinate.","Return the number of sectors in this coordinate space.","","","","","","","","","","","","","","","","Return a new polar coordinate with the given ring â€¦","Return a new polar coordinate with <code>self</code>â€™s ring â€¦","Working maze storage.","Physical maze structure.","Manipulating and managing mazes.","Exporting mazes to other formats.","Generating mazes.","Abstract positioning in mazes.","A maze cell container.","Get the value of a given cell.","Get the value of a given cell for mutation.","Construct a new buffer.","Set the value of a given cell.","Like a wall, but it will never be touched by a generator. â€¦","A unique identifier for a cell within a given maze.","Location of a cell.","Value of a cell.","Type of connection (graph theory: <em>edge</em>) (e.g. wall, â€¦","A connection is considered a passage if one can move â€¦","The default state, when cells have not yet been fully â€¦","A connection is considered a wall if one cannot move â€¦","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cell has not been fully generated (visited). â€¦","If the cell is currently marked.","Set the cellâ€™s mark flag.","","","","","","","","","","","The location type for the cell type this coordinator uses.","The value type for the cell type this coordinator uses.","The type of coordinate space this coordinator supports.","Handles high-level queries on mazes.","Return the coordinate space for this maze.","Return the value of the point <code>pt</code>.","Return the type of connection (graph theory: <em>edge</em>) between â€¦","Return true when <code>get_connection(from, to)</code> returns â€¦","Return true when <code>get_connection(from, to)</code> returns â€¦","Return true when <code>get_connection(from, to)</code> returns â€¦","Return true when <code>get_connection(from, to)</code> returns â€¦","Make a boundary at <code>pt</code>.","Make a boundary from <code>from</code> to <code>to</code>. The points must be â€¦","Make a passage at <code>pt</code>.","Make a passage from <code>from</code> to <code>to</code>. The points must be â€¦","Make a wall at <code>pt</code>.","Make a wall from <code>from</code> to <code>to</code>. The points must be adjacent. â€¦","Simple sugar for <code>MazeExporter</code>s.","Export a maze into another, usually persistent, format.","Export the maze <code>maze</code> to writer <code>output</code>.","<em>See <code>MazeExporter::export()</code>.</em>","Simple sugar for <code>MazeGenerator</code>s.","A maze generator.","<em>See <code>MazeGenerator::generate()</code>.</em>","Generate a random maze.","Generate a maze using a given random number generator.","<em>See <code>MazeGenerator::generate_with_rng()</code>.</em>","A mathematical graph that represents all possible â€¦","The type of iterator returned by <code>iter()</code> and <code>iter_from()</code>.","A logical location in a maze.","The <code>Point</code> type that goes with this coordinate space.","Return whether two points are adjacent in this coordinate â€¦","Return a random point in this coordinate space.","Return an iterator that yields every point in this â€¦","Return an iterator that behaves exactly like <code>iter()</code>, but â€¦","Return the number of points in this coordinate space.","Return a vector containing every point in the coordinate â€¦","A path of cell locations.","A series of movements from location to location.","A path of points.","","","","","","","Test whether this path contains a given location.","Contains a movement from one location to another.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a path from the given locations.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return where this path is a cycle.","Return whether this path is simple.","Return whether this path is a simple cycle.","Return the number of movements in this path.","Make this path into a simple path.","Append a new location to the path.","Create a path where the first location is <code>loc</code>.","","","","","","","","","","","","","Convert all <em>cells</em> (not points) adjacent to the edge of a â€¦","Convert all unvisited <em>points</em> (not cells) in a maze into â€¦"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,0,0,13,0,0,0,13,13,13,11,11,12,13,11,12,13,12,11,12,13,11,12,13,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,11,11,11,11,11,11,11,11,12,13,11,12,13,11,11,11,12,13,11,12,13,12,12,12,11,12,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,26,0,0,0,0,27,26,27,26,26,24,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,25,24,25,26,27,24,25,26,27,24,25,26,27,25,24,25,26,27,24,25,26,27,24,25,26,27,24,24,24,24,24,24,24,24,24,25,26,27,25,24,25,26,27,24,24,24,25,26,27,24,25,26,27,25,25,25,24,25,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,0,0,0,0,30,29,30,29,29,30,29,29,30,29,30,29,30,29,29,29,30,29,29,29,29,29,29,29,30,29,30,29,29,29,29,29,29,29,29,30,29,30,29,30,29,29,29,30,29,30,29,30,29,30,29,0,0,33,34,33,34,33,34,33,33,34,33,34,33,34,33,33,33,34,33,33,33,34,33,34,33,33,33,33,33,33,34,33,33,34,33,34,33,34,33,34,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,0,41,43,45,44,41,43,45,44,41,43,43,44,41,45,41,43,45,44,43,44,41,43,45,44,43,44,41,45,41,43,45,44,41,43,45,44,41,43,45,44,41,41,45,45,41,43,45,44,41,43,45,44,41,43,45,44,41,43,41,43,45,44,41,43,45,44,41,43,45,44,41,43,41,43,45,44,41,43,0,0,0,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,47,48,48,49,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,48,49,0,0,0,0,0,0,0,0,0,53,31,53,53,56,31,53,56,31,53,31,31,53,31,53,56,31,53,56,31,53,31,56,31,53,53,53,31,53,53,56,31,53,53,53,53,53,53,53,53,53,53,53,53,53,53,31,53,53,56,31,53,56,31,53,56,31,31,31,31,31,31,31,31,31,56,53,56,31,53,53,56,31,53,56,31,53,56,31,53,56,31,53,0,0,0,58,60,58,59,60,58,59,58,58,59,58,59,60,58,59,60,58,59,60,58,59,59,59,58,59,59,60,58,59,59,60,58,59,60,58,59,60,58,58,58,58,58,58,60,59,59,60,59,58,59,58,58,59,59,60,58,59,60,58,59,60,58,59,60,58,59,59,59,0,0,0,0,0,0,0,28,28,28,28,32,0,0,0,0,32,32,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,7,32,7,32,2,2,2,7,32,7,32,7,32,7,32,7,32,50,50,50,0,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,73,74,0,0,75,76,76,75,0,77,0,77,77,77,77,77,77,77,0,0,0,78,79,70,78,79,70,70,70,78,79,70,78,79,70,78,79,70,70,70,70,78,79,70,70,70,70,78,79,70,78,79,70,70,70,70,70,70,70,70,70,78,79,70,78,79,70,78,79,70,78,79,70,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[[3,[2]],4],5],[[[6,[2]],4],5],[[]],[[]],[[[3,[2]],7],2],[[[6,[2]],7],2],[[[3,[2]],7],2],[[[6,[2]],7],2],[[],1],[[],1],[[]],[[]],[8,[[3,[2]]]],[8,[[6,[2]]]],[[[3,[2]],7,2]],[[[6,[2]],7,2]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,[[11,1,1],11],[[]],[[]],[[]],[[]],[[]],[[]],0,[11,11],[12,12],[13,13],[[]],[[]],[[]],[[],12],[[],13],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[11,11],14],[[12,12],14],[[13,13],14],[[],14],[[],14],[[],14],[[11,4],5],[[12,4],5],[[13,4],5],[[[16,[15]]],11],[[[16,[17]]],11],[[[16,[18]]],11],[[]],[[[16,[19]]],11],[[[16,[1]]],11],[[[16,[20]]],11],[[[16,[21]]],11],[[[16,[22]]],11],[[]],[[]],[[11,23]],[[12,23]],[[13,23]],[[11,1]],[[11,1]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[12,14],[12,14],0,[[11,1,17],11],[[12,14]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[24,1,1],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[25,25],[26,26],[27,27],[[]],[[]],[[]],[[]],[[],25],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],0,[[24,24],14],[[25,25],14],[[26,26],14],[[27,27],14],[[],14],[[],14],[[],14],[[],14],[[24,4],5],[[25,4],5],[[26,4],5],[[27,4],5],[[[16,[1]]],24],[[[16,[20]]],24],[[[16,[19]]],24],[[[16,[21]]],24],[[[16,[22]]],24],[[[16,[18]]],24],[[[16,[15]]],24],[[[16,[17]]],24],[[]],[[]],[[]],[[]],[[25,1,27],26],[[24,23]],[[25,23]],[[26,23]],[[27,23]],[[24,1]],[[24,1]],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[25,14],[25,14],0,[[24,1,17],24],[[25,14]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[[29,[[28,[12]]]]],[[28,[12]]]],[[[30,[[28,[12]]]]],[[29,[[28,[12]]]]]],[31,[[30,[[28,[12]]]]]],[[[29,[[28,[12]]]]]],[1],[1],[1],[1],[1],[1],[[[29,[[28,[12]]]],4],5],[[[29,[[28,[12]]]],4],5],[[]],[[]],[[[29,[[28,[12]]]]]],[[[29,[[28,[12]]]]],12],[[[29,[[28,[12]]]]],12],[[[29,[[28,[12]]]]],32],[[[29,[[28,[12]]]]],[[16,[8]]]],[[[29,[[28,[12]]]]]],[[],1],[[],1],[[]],[[]],[[[29,[[28,[12]]]]]],[[[29,[[28,[12]]]]]],[[[29,[[28,[12]]]]]],[[[29,[[28,[12]]]]]],[[[29,[[28,[12]]]]]],[[[29,[[28,[12]]]]]],[[[29,[[28,[12]]]]]],[[[30,[[28,[12]]]],[16,[[16,[1]]]]],[[30,[[28,[12]]]]]],[[[29,[[28,[12]]]]],[[16,[[16,[1]]]]]],[[[30,[[28,[12]]]],[16,[8]]],[[30,[[28,[12]]]]]],[[[29,[[28,[12]]]]],[[16,[8]]]],[[[30,[[28,[12]]]],[16,[1]]],[[30,[[28,[12]]]]]],[[[29,[[28,[12]]]],12]],[[[29,[[28,[12]]]],13]],[[[29,[[28,[12]]]],13]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[[33,[[28,[25]]]]],[[28,[25]]]],[[[34,[[28,[25]]]]],[[33,[[28,[25]]]]]],[[[33,[[28,[25]]]]]],[1],[1],[1],[1],[1],[1],[[[33,[[28,[25]]]],4],5],[[[33,[[28,[25]]]],4],5],[[]],[[]],[[[33,[[28,[25]]]]]],[[[33,[[28,[25]]]]],32],[[],1],[[],1],[[]],[[]],[[[33,[[28,[25]]]]]],[[[33,[[28,[25]]]]]],[[[33,[[28,[25]]]]]],[[[33,[[28,[25]]]]]],[[[33,[[28,[25]]]]]],[[[33,[[28,[25]]]]]],[31,[[34,[[28,[25]]]]]],[[[33,[[28,[25]]]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,[[]],[[]],[1],[1],[1],[[35,[29,[[28,[12]]]],[0,[36,37]]],38],[[]],[[],1],[[]],[39,35],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[1],[1],[1],[[40,[29,[[28,[12]]]],36],38],[[]],[[],1],[[]],[[],40],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,42],[[43,42],43],[43,41],[44,45],[[],43],[[],44],[41,8],[[43,8],43],[45,8],[[44,8],44],[[43,1],43],[[44,1],44],[41,8],[[43,8],43],[45,8],[[44,8],44],[[43,1],43],[[44,1],44],[[],41],[[],45],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[9,[46]]]],[[41,[29,[[28,[12]]]],36],38],[[45,[33,[[28,[25]]]],36],38],[[],[[9,[46]]]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[41,42],[[43,42],43],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[41,42],[[43,42],43],[[]],[[]],[[]],[[]],[41,42],[[43,42],43],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],47],[[],48],[[],49],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[47,50,[0,[51,52]]]],[[[0,[51,52]]]],[[48,50,[0,[51,52]]]],[[[0,[51,52]]]],[[49,50,[0,[51,52]]]],[[[0,[51,52]]]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[],47],[[],48],[[],49],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[53,1],14],[31,14],[[53,1,1],53],[[53,53],[[54,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,[0,[51,52]]]],[31,31],[53,53],[[]],[[]],[1],[1],[1],[1],[1],[1],[31,[[16,[8]]]],[1],[1],[1],[[53,53],14],[[],14],[[31,4],5],[[53,4],5],[[53,4],5],[[]],[[]],[[[16,[17]]],53],[[[16,[22]]],53],[[[16,[15]]],53],[[[16,[18]]],53],[[],53],[[[16,[21]]],53],[[],53],[[[16,[19]]],53],[[]],[[],53],[[[16,[20]]],53],[[],53],[[[16,[1]]],53],[[53,23]],[[31,1]],[[53,1]],[[53,1]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[31],[31],[31,14],[31],[31],[31,8],[31,55],[[[16,[8]]],31],[[[16,[1]]],31],[56,54],[[53,1,17],53],[56],[[]],[[]],[[],57],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,0,[58,14],[[]],[[]],[[]],[[]],[[]],[[]],[[58,[0,[51,52]]]],[58,58],[59,59],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[59,59],14],[[],14],[[58,4],5],[[59,4],5],[[59,4],5],[[]],[[]],[[]],[[59,23]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[58],[58],[58,8],[58,55],[[8,8],58],[[1,1],58],[60,54],[[59,17],59],[[59,17],59],[[],61],0,[58,8],0,[58,8],[[]],[[]],[[],57],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[59,1],59],[[59,1],59],0,0,0,0,0,0,0,[7],[7],[8],[7],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[7,7],[32,32],[[]],[[]],[1],[1],[1],[1],[1],[1],[[7,7],14],[[32,32],14],[[],14],[[],14],[[7,4],5],[[32,4],5],[[]],[[]],[[7,23]],[[],1],[[],1],[[]],[[]],[[],14],[[],14],[14],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,[[]],[[]],[[],32],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],38],[[],38],0,0,[[]],[[]],[[[0,[51,52]]]],[[[0,[51,52]]]],0,0,0,0,[[],14],[[[0,[51,52]]]],[[]],[[]],[[],8],[[],55],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]],[0,[52,62,63,64,65,66,67,68,69]]],14],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]],[0,[52,62,63,64,65,66,67,68,69]],[0,[52,62,63,64,65,66,67,68,69]]],14],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[[70,[[0,[64,52,62,63,64,65,66,67,68,69]]]],[70,[[0,[64,52,62,63,64,65,66,67,68,69]]]]],14],[[],14],[[[70,[[0,[69,52,62,63,64,65,66,67,68,69]]]],4],5],[[]],[[]],[[]],[[[55,[[0,[52,62,63,64,65,66,67,68,69]]]]],[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]]],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]],[72,[[71,[[0,[52,62,63,64,65,66,67,68,69]]]]]]]],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]],[72,[[71,[[0,[52,62,63,64,65,66,67,68,69]]]]]]]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]]],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]],14],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]],14],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]],14],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]],1],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]]],[[[70,[[0,[52,62,63,64,65,66,67,68,69]]]],[0,[52,62,63,64,65,66,67,68,69]]]],[[[0,[52,62,63,64,65,66,67,68,69]]],[[70,[[0,[52,62,63,64,65,66,67,68,69]]]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],[50],[50]],"c":[],"p":[[15,"usize"],[8,"CellValue",679],[3,"VecBuffer",10],[3,"Formatter",821],[6,"Result",821],[3,"ArrayBuffer",10],[3,"CellID",679],[3,"NonZeroUsize",822],[4,"Result",823],[3,"TypeId",824],[3,"BlockCellLocation",48],[3,"BlockCellValue",48],[4,"BlockCellPrimaryValue",48],[15,"bool"],[15,"u8"],[15,"array"],[15,"isize"],[15,"u32"],[15,"i32"],[15,"i8"],[15,"i16"],[15,"u16"],[8,"Hasher",825],[3,"InlineCellLocation",131],[3,"InlineCellValue",131],[4,"InlineCellValueEdge",131],[4,"InlineCellValueEdgeSide",131],[8,"MazeBuffer",674],[3,"BoxSpaceBlockCellMazeCoordinator",238],[3,"BoxSpaceBlockCellMazeCoordinatorBuilder",238],[3,"BoxCoordinateSpace",507],[4,"ConnectionType",679],[3,"BoxSpaceInlineCellMazeCoordinator",291],[3,"BoxSpaceInlineCellMazeCoordinatorBuilder",291],[3,"BoxSpaceImageMazeExporter",335],[8,"Write",826],[8,"Seek",826],[6,"Result",827],[4,"ImageFormat",828],[3,"BoxSpaceSchematicMazeExporter",351],[3,"BoxSpaceBlockCellTextMazeExporter",367],[15,"char"],[3,"BoxSpaceBlockCellTextMazeExporterBuilder",367],[3,"BoxSpaceInlineCellTextMazeExporterBuilder",367],[3,"BoxSpaceInlineCellTextMazeExporter",367],[3,"Error",827],[3,"NAryTreeGenerator",451],[3,"HuntAndKillGenerator",451],[3,"RecursiveBacktrackerGenerator",451],[8,"MazeCoordinator",727],[8,"Rng",829],[8,"Sized",830],[3,"CoordinateTuplet",507],[4,"Option",831],[3,"Vec",832],[3,"BoxCoordinateSpaceIterator",507],[3,"String",833],[3,"PolarCoordinateSpace",597],[3,"PolarCoordinate",597],[3,"PolarCoordinateSpaceIterator",597],[3,"IterBridge",834],[8,"Clone",835],[8,"Copy",830],[8,"PartialEq",836],[8,"Eq",836],[8,"Hash",825],[8,"Send",830],[8,"Sync",830],[8,"Debug",821],[3,"Path",764],[15,"slice"],[8,"SliceIndex",837],[8,"MazeExporter",744],[8,"DefaultMazeExporter",744],[8,"DefaultMazeGenerator",748],[8,"MazeGenerator",748],[8,"CoordinateSpace",754],[3,"PointPath",764],[3,"CellPath",764]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
